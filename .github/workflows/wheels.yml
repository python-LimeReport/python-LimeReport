name: Build

on: [push, pull_request]

env:
  PIP_EXTRA_INDEX_URL: "https://download.qt.io/official_releases/QtForPython"

jobs:
  build_sdist:
    name: Build source distribution (Qt ${{ matrix.qt }} USE_ZINT = ${{ matrix.zint }})
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/python-limereport/manylinux_2_28:qt-${{ matrix.qt }}
    strategy:
      matrix:
        zint: [TRUE, FALSE]
        qt: [6.4.2, 6.7.2]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup env variables
        shell: bash
        run: $GITHUB_WORKSPACE/.github/setup_wheels_env.sh
        env:
          QT_VERSION: ${{ matrix.qt }}

      - name: Apply patches
        working-directory: LimeReport
        run: git apply ../patches/*.patch

      - name: Build sdist
        run: pipx run build --sdist
        env:
          LIMEREPORT_USE_ZINT: ${{ matrix.zint }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-sdist-${{ matrix.qt }}-${{ matrix.zint }}
          path: dist/*.tar.gz
          
  build_wheels:
    name: Build wheels on ${{ matrix.os }} (Qt ${{ matrix.qt }} USE_ZINT = ${{ matrix.zint }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        zint: ["TRUE", "FALSE"]
        qt: [6.4.2, 6.7.2]
        os: [ubuntu-20.04, windows-2019]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup env variables
        shell: bash
        run: $GITHUB_WORKSPACE/.github/setup_wheels_env.sh
        env:
          QT_VERSION: ${{ matrix.qt }}

      - name: Apply patches
        working-directory: LimeReport
        shell: bash
        run: git apply ../patches/*.patch

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt }}
          cache: true
        if: runner.os == 'Windows'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: "cp39-manylinux* cp39-win_amd64"
          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: ghcr.io/python-limereport/manylinux_2_28:qt-${{ matrix.qt }}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
              auditwheel repair $AUDITWHEEL_REPAIR_OPTIONS -w {dest_dir} {wheel}

          CIBW_ENVIRONMENT: >
            LIMEREPORT_USE_ZINT="${{ matrix.zint }}"

          CIBW_ENVIRONMENT_LINUX: >
            LIMEREPORT_USE_ZINT="${{ matrix.zint }}"
            CMAKE_BUILD_PARALLEL_LEVEL="$(nproc)"
            CMAKE_ARGS="-DPython3_EXECUTABLE=$(which python) -DLIBSHIBOKEN_INCLUDE_DIRS=/usr/local/include/shiboken6 -DPYSIDE_INSTALL_DIR=/usr/local"
          CIBW_ENVIRONMENT_PASS_LINUX: AUDITWHEEL_REPAIR_OPTIONS PIP_EXTRA_INDEX_URL

          CIBW_BEFORE_BUILD: >
            python -m pip install pip-tools &&
            pip-compile pyproject.toml &&
            pip install -r requirements.txt &&
            python cibuildwheel/before_build.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-whl-${{ matrix.qt }}-${{ matrix.zint }}-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  release:
    name: Release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Github Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ contains(github.ref, '.dev') }}
          files: dist/**/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
